{"version":3,"sources":["src/components/blocks/Header/HeaderStyles.js","src/utils/mapper.js","src/utils/temperature–°onversion.js","src/action/weather.js","src/constants/actionTypes.js","src/action/appliactionActions.js","src/components/blocks/Header/Header.js","src/components/blocks/Loaction/LoactionStyles.js","src/components/blocks/Loaction/Loaction.js","src/components/blocks/Weather/WeatherStyles.js","src/components/blocks/Weather/Weather.js","src/components/blocks/Error/ErrorStyles.js","src/components/blocks/Error/Error.js","src/components/blocks/Coordinates/CoordinatesStyles.js","src/components/blocks/Coordinates/Coordinates.js","src/screens/MainScreen/MainScreenStyles.js","src/screens/MainScreen/MainScreen.js","src/action/geolocation.js","src/components/controls/Item/ItemStyle.js","src/components/controls/editModal/EditModalStyle.js","src/components/controls/editModal/EditModal.js","src/components/controls/Item/Item.js","src/screens/HistoryScreen/HistoryScreenStyles.js","src/screens/HistoryScreen/HistoryScreen.js","src/navigation/AppNavigation.js","src/reducers/index.js","App.js","web-build/register-service-worker.js"],"names":["StyleSheet","create","header","justifyContent","alignItems","marginTop","input","textAlign","fontSize","color","width","borderStyle","borderBottomWidth","borderBottomColor","button","display","mapperForOpenWeather","response","city","name","country","sys","tempreture","temp","main","Math","floor","humidity","wind","speed","description","weather","coordinates","lat","coord","lon","lng","icon","mapperForYandexGeolocation1","GeoObjectCollection","featureMember","GeoObject","weatherResponseAction","data","type","payload","weatherResponseFailAction","error","weatherRequest","dispatch","getState","a","async","previousRequests","fetch","api_call","json","console","log","cod","push","date","Date","setCity","text","Header","useDispatch","View","style","styles","TextInput","onChangeText","placeholder","AntDesign","size","title","onPress","loaction","Loaction","useSelector","state","Text","iconWeather","height","additionalParameter","Weather","Image","source","uri","Error","Coordinates","Fragment","container","flex","backgroundColor","MainScreen","useState","where","setWhere","isError","useEffect","navigator","geolocation","getCurrentPosition","geoSuccess","enableHighAccuracy","timeOut","maximumAge","position","coords","latitude","longitude","geolocationResponseAction","currentPosition","StatusBar","row","alignSelf","parametrs","EditModal","visible","setVisible","zIndex","Button","Item","isModal","setIsModal","getDate","getMonth","getFullYear","getHours","getMinutes","HistoryScreen","SafeAreaView","FlatList","renderItem","item","keyExtractor","random","Tab","createBottomTabNavigator","AppNavigation","NavigationContainer","Navigator","Screen","component","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","addEventListener","serviceWorker","register","scope","then","info","catch"],"mappings":"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","file":"static/js/app.65360bdb.chunk.js","sourcesContent":["import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  header: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 30,\n  },\n  input: {\n    textAlign: 'center',\n    fontSize: 25,\n    color: '#fff',\n    width: 200,\n    borderStyle: 'solid',\n    borderBottomWidth: 2,\n    borderBottomColor: '#fff',\n  },\n  button: {\n    display: 'flex'\n  },\n});","import { calCelsius } from './temperature–°onversion'\n\nexport const mapperForOpenWeather = response => ({\n  city: response.name,\n  country: response.sys.country,\n  tempreture: calCelsius(response.main.temp),\n  humidity: response.main.humidity,\n  wind: response.wind.speed,\n  description: response.weather[0].description,\n  coordinates: { lat: response.coord.lon, lng: response.coord.lat },\n  icon: response.weather[0].icon,\n});\n\nexport const mapperForYandexGeolocation1 = response => response.response.GeoObjectCollection.featureMember[2].GeoObject.name;\nexport const mapperForYandexGeolocation2 = response => response.response.GeoObjectCollection.featureMember[2].GeoObject.name;","export const calCelsius = temp => Math.floor(temp - 273.15);\n","import {\r\n  WEATHER_RESPONSE,\r\n  WEATHER_RESPONSE_FAIL,\r\n} from './../constants/index';\r\nimport { mapperForOpenWeather } from './../utils/index';\r\n\r\nexport const weatherResponseAction = data => ({\r\n  type: WEATHER_RESPONSE,\r\n  payload: data,\r\n});\r\n\r\nexport const weatherResponseFailAction = error => ({\r\n  type: WEATHER_RESPONSE_FAIL,\r\n  payload: error,\r\n});\r\n\r\n\r\nexport const weatherRequest = () => async (dispatch, getState) => {\r\n  const { city, previousRequests } = getState();\r\n  \r\n  try {\r\n    const api_call = await fetch( `https://api.openweathermap.org/data/2.5/weather?q=${ city }&appid=b6ce763b1e16f6f845d8d595fa0efb2c` );\r\n    const response = await api_call.json();\r\n    console.log('response: ', response);\r\n    \r\n    (response.cod === 200) \r\n      ? dispatch( weatherResponseAction( mapperForOpenWeather(response) ) ) \r\n      : dispatch(weatherResponseFailAction(true)); \r\n    \r\n    const { data } = getState();\r\n    previousRequests.push({ date: new Date(), data })\r\n  } catch (error) {\r\n    console.error('Error: ', error);\r\n    dispatch(weatherResponseFailAction(true));\r\n  }\r\n};","export const WEATHER_RESPONSE = 'WEATHER_RESPONSE';\nexport const WEATHER_RESPONSE_FAIL = 'WEATHER_RESPONSE_FAIL';\n\nexport const SET_CITY = 'SET_CITY';\n\nexport const GEOLOCATION_RESPONSE_FAIL = 'GEOLOCATION_RESPONSE_FAIL';\nexport const GEOLOCATION_RESPONSE = 'GEOLOCATION_RESPONSE';\nexport const GEOLOCATION_CURRENT = 'GEOLOCATION_CURRENT';","import { SET_CITY, SET_VISABLE_MODAL } from './../constants/index';\r\n\r\nexport const setCity = text => ({\r\n  type: SET_CITY,\r\n  payload: text,\r\n});\r\n","import React from 'react';\nimport { View, TextInput } from 'react-native';\nimport { useDispatch } from 'react-redux'\nimport { AntDesign } from '@expo/vector-icons'; \n\nimport styles from './HeaderStyles'; \nimport { weatherRequest, setCity } from './../../../action/index';\n\nexport const Header = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <View style={styles.header}>\n      <TextInput \n        style={styles.input}\n        onChangeText={(text) => dispatch(setCity(text))}\n        placeholder=\"–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥\"\n      />\n      <AntDesign \n        name=\"search1\" \n        size={24} \n        color=\"white\"\n        style={styles.button}\n        title=\"&#10003;\"\n        onPress={() => dispatch(weatherRequest())}\n      />\n    </View>\n  );\n};\n","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  loaction: {\n    marginTop: 30,\n  },\n  city: {\n    color: '#fff',\n    fontSize: 32,\n    textAlign: 'center',\n  },\n  country: {\n    color: '#fff',\n    fontSize: 19,\n    textAlign: 'center',\n  },\n});","import React from 'react';\nimport { View, Text } from 'react-native';\nimport { useSelector } from 'react-redux';\n\nimport styles from './LoactionStyles';\n\nexport const Loaction = () => {\n  const city = useSelector(state => state.data.city);\n  const country = useSelector(state => state.data.country);\n\n  return (\n    <View style={styles.loaction}>\n      <Text style={styles.city}>{city}</Text>\n      <Text style={styles.country}>{country}</Text>\n    </View>\n  );\n};","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  iconWeather: {\n    width: 150, \n    height: 150,\n  },\n  weather: {\n    color: '#fff',\n    marginTop: 20,\n  },\n  description: {\n    color: '#fff',\n    fontSize: 20,\n    textAlign: 'center',\n  },\n  tempreture: {\n    color: '#fff',\n    fontSize: 48,\n    textAlign: 'center',\n  },\n  additionalParameter: {\n    color: '#fff',\n    marginTop: 20,\n    fontSize: 25,\n    textAlign: 'center',\n  },\n});","import React from 'react';\nimport { View, Text, Image } from 'react-native';\nimport { useSelector } from 'react-redux';\n\nimport styles from './WeatherStyles';\n\nexport const Weather = () => {\n  const description = useSelector(state => state.data.description);\n  const tempreture = useSelector(state => state.data.tempreture);\n  const humidity = useSelector(state => state.data.humidity);\n  const wind = useSelector(state => state.data.wind);\n  const icon = useSelector(state => state.data.icon);\n  return (\n    <View style={styles.weather}>\n      <Image \n        source={{uri: `http://openweathermap.org/img/wn/${icon}.png`,}} \n        style={styles.iconWeather}\n      /> \n      <Text style={styles.description}>{description}</Text>\n      <Text style={styles.tempreture}>{tempreture} &deg;C</Text>\n      <Text style={styles.additionalParameter}>Humidity {humidity}%</Text>\n      <Text style={styles.additionalParameter}>Wind {wind} km/h</Text>\n    </View>\n  );\n};","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  error: {\n    textAlign: 'center',\n    fontSize: 30,\n    color: '#fff',\n  }\n});","import React from 'react';\nimport { Text } from 'react-native';\nimport styles from './ErrorStyles';\n\nexport const Error = () => ( <Text style={styles.error}>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥</Text> );","import { StyleSheet } from 'react-native';\r\n\r\nexport default StyleSheet.create({\r\n  coordinates: {\r\n    color: '#fff',\r\n    fontSize: 19,\r\n    textAlign: 'center',\r\n  },\r\n});","import React from 'react';\r\nimport { Text } from 'react-native';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport styles from './CoordinatesStyles';\r\n\r\nexport const Coordinates = () => {\r\n  const coordinates = useSelector(state => state.data.coordinates);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {coordinates && <Text style={styles.coordinates}>{`latitude: ${coordinates.lat}`}</Text>}\r\n      {coordinates && <Text style={styles.coordinates}>{`longitude: ${coordinates.lng}`}</Text>}\r\n    </React.Fragment>\r\n  );\r\n};","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1c9bbe',\n    alignItems: 'center',\n  },\n});","import React, { useEffect, useState, Component } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { View } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Header } from '../../components/blocks/Header/Header';\nimport { Loaction } from '../../components/blocks/Loaction/Loaction';\nimport { Weather } from '../../components/blocks/Weather/Weather';\nimport { Error } from '../../components/blocks/Error/Error'\nimport { Coordinates } from '../../components/blocks/Coordinates/Coordinates';\n\nimport { geolocationResponseAction, reverseGeocoding } from '../../action/index';\nimport styles from './MainScreenStyles';\n\nexport const MainScreen = ({}) => {\n  const dispatch = useDispatch();\n  const [where, setWhere] = useState(); \n\n  const data = useSelector(state => state.data);\n  const isError = useSelector(state => state.isError);\n\n  useEffect(() => {\n    const geoOptions = {\n        enableHighAccuracy: true,\n        timeOut: 20000,\n        maximumAge: 60 * 60 * 24\n    };\n    navigator.geolocation.getCurrentPosition( geoSuccess, geoSuccess, geoOptions);\n  }, [])\n\n  const geoSuccess = (position) => {\n    setWhere({ lat: position.coords.latitude, lng: position.coords.longitude });\n    dispatch(geolocationResponseAction(where));\n    dispatch(reverseGeocoding());\n  }\n\n  return (\n    <View style={styles.container} >\n      <Header />\n      { data && <Coordinates /> }\n      { isError && <Error /> }\n      { data && !isError && \n        <React.Fragment>\n          <Loaction /> \n          <Weather />\n        </React.Fragment>\n      }\n      <StatusBar style=\"auto\" />\n    </View>\n  )\n}\n","\r\nimport {\r\n  GEOLOCATION_RESPONSE_FAIL,\r\n  GEOLOCATION_RESPONSE,\r\n  GEOLOCATION_CURRENT\r\n} from './../constants/index';\r\nimport { mapperForYandexGeolocation1, mapperForYandexGeolocation2 } from './../utils/index';\r\nimport { \r\n  weatherResponseFailAction,\r\n  weatherRequest\r\n} from './weather'\r\n\r\nexport const setCurrentGeolocation = (position) => ({\r\n  type: GEOLOCATION_CURRENT,\r\n  payload: position\r\n});\r\n\r\nexport const geolocationResponseAction = (position) => ({\r\n  type: GEOLOCATION_RESPONSE,\r\n  payload: position\r\n});\r\n\r\nexport const geolocationResponseFailAction = (err) => ({\r\n  type: GEOLOCATION_RESPONSE_FAIL,\r\n  payload: err.message\r\n});\r\n/*\r\nconst city–°heck = () => {\r\n  const api_call = await fetch( `https://api.openweathermap.org/data/2.5/weather?q=${ city }&appid=b6ce763b1e16f6f845d8d595fa0efb2c` );\r\n  const response = await api_call.json();\r\n  return response.cod\r\n};\r\n\r\nexport const findingSuitableMapper = (city) => {\r\n  \r\n};*/\r\n\r\nexport const reverseGeocoding = () => async (dispatch, getState) => {\r\n  const { currentPosition } = getState();\r\n  console.log('currentPosition: ', currentPosition);\r\n  \r\n  try {\r\n    const api_call = await fetch( `https://geocode-maps.yandex.ru/1.x/?format=json&apikey=500e65e6-b4fb-4dbc-8abf-318ac1e1cf61&geocode=${currentPosition.lat},${currentPosition.lng}&lang=en_US` );\r\n    const response = await api_call.json();\r\n    \r\n    dispatch(setCity(mapperForYandexGeolocation1(response)))\r\n    dispatch(weatherRequest())\r\n  } catch (error) {\r\n    dispatch(weatherResponseFailAction(true));\r\n  }\r\n};\r\n","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  row: {\n    marginTop: 50,\n    backgroundColor: '#fff',\n    alignSelf: 'stretch'\n  },\n  parametrs: {\n    fontSize: 20\n  }\n});","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  parametrs: {\n    textAlign: 'center',\n    fontSize: 15,\n    width: 250,\n  },\n});","import React from 'react';\nimport { View, Text, Button } from 'react-native';\n\nimport styles from './EditModalStyle';\n\nexport const EditModal = ({visible, setVisible, data}) => {\n  return (\n    <View style={{position: 'absolute', zIndex: 1000, display: visible ? 'flex' : 'none', backgroundColor: '#fff'}}>\n      <View style={styles.container}>\n        <Text style={styles.parametrs}>City: {data.city}</Text>\n        <Text style={styles.parametrs}>Country: {data.country}</Text>\n        <Text style={styles.parametrs}>Description: {data.description}</Text>\n        <Text style={styles.parametrs}>Tempreture:{data.tempreture} &deg;C</Text>\n        <Text style={styles.parametrs}>Humidity: {data.humidity}</Text>\n        <Text style={styles.parametrs}>Wind: {data.wind}</Text>\n        <Button \n          title=\"Close\"\n          onPress={() => {\n            setVisible(false);\n          }}\n      />\n      </View>\n    </View>\n  );\n};\n/* \n    <View style={{position: 'absolute', zIndex: 1000, display: visible ? 'flex' : 'none', backgroundColor: '#fff'}}>\n      <View style={styles.container}>\n        <Text style={styles.parametrs}>City: {data.city}</Text>\n        <Text style={styles.parametrs}>Country: {data.country}</Text>\n        <Text style={styles.parametrs}>Description: {data.description}</Text>\n        <Text style={styles.parametrs}>Tempreture:{data.tempreture} &deg;C</Text>\n        <Text style={styles.parametrs}>Humidity: {data.humidity}</Text>\n        <Text style={styles.parametrs}>Wind: {data.wind}</Text>\n        <Button \n          title=\"Close\"\n          onPress={() => {\n            setVisible(false);\n          }}\n      />\n      </View>\n    </View>\n*/","import React, { useState } from 'react';\nimport { Text, View, Button } from 'react-native';\nimport { useDispatch } from 'react-redux'\n\nimport styles from './ItemStyle';\nimport { EditModal } from '../editModal/EditModal';\nimport { setCity, weatherRequest } from '../../../action/index'\n\nexport const Item = ({ date, data }) => {\n  const dispatch = useDispatch();\n  const [isModal, setIsModal] = useState(false);\n\n  return (\n    <View style={styles.row} >\n      <Text style={styles.parametrs}>{ `Date: ${date.getDate()}.${date.getMonth()}.${date.getFullYear() }`}</Text>\n      <Text style={styles.parametrs}>{ `Time: ${date.getHours()} : ${date.getMinutes() }`}</Text>\n      <Text style={styles.parametrs}>{ `latitude:${ data.coordinates.lat } longitude:${ data.coordinates.lng }` }</Text>\n      <Text style={styles.parametrs}>{ `City: ${data.city}` }</Text>\n      <Button \n        title=\"Repeat this request\"\n        onPress={() => {\n          dispatch(setCity(data.city));\n          dispatch(weatherRequest());\n        }}\n      />\n      <Button \n        title=\"Check this request(History)\"\n        onPress={() => {\n          setIsModal(true)\n        }}\n      />\n      <EditModal visible={isModal} setVisible={setIsModal} data={data}/>\n    </View>\n  )\n}","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f26122',\n    alignItems: 'center',\n  },\n});","import React, { useEffect } from 'react';\nimport { FlatList, SafeAreaView, AsyncStorage } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Item } from '../../components/controls/Item/Item';\n\nimport styles from './HistoryScreenStyles';\n\nexport const HistoryScreen = ({}) => {\n  const previousRequests = useSelector(state => state.previousRequests);\n\n  const renderItem = ({ item }) => (\n    <Item \n      date={item.date} \n      data={item.data}\n    />\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList \n        data={previousRequests}\n        renderItem={renderItem}\n        keyExtractor={item => `${item.data.city + item.data.coordinates.lng + Math.random() * 101}`}\n      />\n    </SafeAreaView>\n  )\n}","import React from 'react';\nimport { NavigationContainer  } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nimport { MainScreen } from '../screens/MainScreen/MainScreen';\nimport { HistoryScreen } from '../screens/HistoryScreen/HistoryScreen';\n\nconst Tab = createBottomTabNavigator();\n\nexport function AppNavigation() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name=\"Weather\" component={MainScreen} />\n        <Tab.Screen name=\"History\" component={HistoryScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}","import {\n  SET_CITY,\n  SET_VISABLE_MODAL,\n  WEATHER_RESPONSE,\n  WEATHER_RESPONSE_FAIL,\n  GEOLOCATION_RESPONSE_FAIL,\n  GEOLOCATION_RESPONSE,\n  GEOLOCATION_CURRENT,\n} from './../constants/index';\n\nconst initialState = {\n  data: null,\n  previousRequests: [],\n  currentPosition: null,\n  isError: false,\n};\n\nexport default function reducer(state = initialState, { type, payload }) {\n  switch (type) {\n    case SET_CITY: return {\n      ...state,\n      city: payload,\n    };\n\n    case WEATHER_RESPONSE: return {\n      ...state,\n      data: { ...payload },\n      isError: false,\n    };\n\n    case WEATHER_RESPONSE_FAIL: return {\n      ...state,\n      isError: payload,\n    };\n\n    case GEOLOCATION_RESPONSE_FAIL: return {\n      ...state,\n      isError: payload,\n    }\n\n    case GEOLOCATION_RESPONSE: return {\n      ...state,\n      currentPosition: payload,\n    }\n\n    case GEOLOCATION_CURRENT: return {\n      ...state,\n      previousRequests: payload,\n    }\n\n    default:\n      return state;\n  }\n}","import React, { Component } from 'react';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport { AppNavigation } from './src/navigation/AppNavigation';\nimport reducer from './src/reducers/index';\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__   \n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension‚Äôs options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst store = createStore(\n  reducer, \n  composeEnhancers(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <AppNavigation />\n    </Provider>\n  );\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}